<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spencer.springboot.dao.ClassicMapper">
  <resultMap id="BaseResultMap" type="com.spencer.springboot.po.Classic">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="fav_nums" jdbcType="INTEGER" property="favNums" />
    <result column="image" jdbcType="VARCHAR" property="image" />
    <result column="indexes" jdbcType="INTEGER" property="indexes" />
    <result column="like_status" jdbcType="INTEGER" property="likeStatus" />
    <result column="pubdate" jdbcType="VARCHAR" property="pubdate" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="url" jdbcType="VARCHAR" property="url" />
  </resultMap>
  <sql id="Base_Column_List">
    id, content, fav_nums, image, indexes, like_status, pubdate, title, type, url
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from classic
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from classic
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.spencer.springboot.po.Classic">
    insert into classic (id, content, fav_nums, 
      image, indexes, like_status, 
      pubdate, title, type, 
      url)
    values (#{id,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}, #{favNums,jdbcType=INTEGER}, 
      #{image,jdbcType=VARCHAR}, #{indexes,jdbcType=INTEGER}, #{likeStatus,jdbcType=INTEGER}, 
      #{pubdate,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, 
      #{url,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.spencer.springboot.po.Classic">
    insert into classic
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="favNums != null">
        fav_nums,
      </if>
      <if test="image != null">
        image,
      </if>
      <if test="indexes != null">
        indexes,
      </if>
      <if test="likeStatus != null">
        like_status,
      </if>
      <if test="pubdate != null">
        pubdate,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="url != null">
        url,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="favNums != null">
        #{favNums,jdbcType=INTEGER},
      </if>
      <if test="image != null">
        #{image,jdbcType=VARCHAR},
      </if>
      <if test="indexes != null">
        #{indexes,jdbcType=INTEGER},
      </if>
      <if test="likeStatus != null">
        #{likeStatus,jdbcType=INTEGER},
      </if>
      <if test="pubdate != null">
        #{pubdate,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.spencer.springboot.po.Classic">
    update classic
    <set>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="favNums != null">
        fav_nums = #{favNums,jdbcType=INTEGER},
      </if>
      <if test="image != null">
        image = #{image,jdbcType=VARCHAR},
      </if>
      <if test="indexes != null">
        indexes = #{indexes,jdbcType=INTEGER},
      </if>
      <if test="likeStatus != null">
        like_status = #{likeStatus,jdbcType=INTEGER},
      </if>
      <if test="pubdate != null">
        pubdate = #{pubdate,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.spencer.springboot.po.Classic">
    update classic
    set content = #{content,jdbcType=VARCHAR},
      fav_nums = #{favNums,jdbcType=INTEGER},
      image = #{image,jdbcType=VARCHAR},
      indexes = #{indexes,jdbcType=INTEGER},
      like_status = #{likeStatus,jdbcType=INTEGER},
      pubdate = #{pubdate,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      url = #{url,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateStatus">
    UPDATE
    classic
    SET like_status = #{like_status}
    WHERE id = #{id} and type = #{type}
  </update>

  <select id="selectLatest" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from classic
    ORDER BY indexes DESC LIMIT 0,1
  </select>

  <select id="selectNext" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from classic
    WHERE indexes = #{indexes}
  </select>

  <select id="selectPrevious" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from classic
    WHERE indexes = #{indexes}
  </select>

  <select id="selectClassic" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from classic
    WHERE id = #{id} and type = #{type}
  </select>

  <select id="findAll" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from classic
  </select>


</mapper>